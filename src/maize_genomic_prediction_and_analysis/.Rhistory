# script meant to perform genomic prediction and analyses for maize
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
if ("maize_env" %in% conda_list()$name) {
print("using maize_env")
use_condaenv("maize_env")
}
# install other requirements from github if necessary
install_other_requirements <- F
if (install_other_requirements) {
# reticulate::install_miniconda()
conda_create("maize_env")
use_condaenv("maize_env")
library(devtools)
devtools::install_github("ljacquin/KRMM")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(envname = "maize_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
library(future)
library(future.apply)
library(grDevices)
# define computation mode, i.e. local or cluster
computation_mode <- "cluster"
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
green_gradient <- c("#A3E4A7", "#66C266", "#2E8B57", "#006400", "#003200")
pa_colors_ <- c(blue_gradient, yellow_orange_gradient, green_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(
blue_gradient[3],
yellow_orange_gradient[3],
green_gradient[3]
)
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c(
"anthesis.silking.interval", "anthesis", "ear.height",
"grain.number", "grain.weight", "grain.yield",
"plant.height", "silking", "tassel.height"
)
# traits_ <- c(
#   "grain.weight", "grain.yield"
# )
trait_ = "anthesis"
kernel_num
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
blup_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"blup_phenotypes.csv"
)))[, c("Genotype", trait_)]
# get genotype data
omic_df <- as.data.frame(fread(paste0(
geno_dir_path,
"genomic_data.csv"
)))
# remove rows with na, inf or char associated to trait for raw_pheno_df
idx_na_inf_char_raw <- which(is.na(raw_pheno_df[, trait_]) |
is.infinite(raw_pheno_df[, trait_]) |
is.na(suppressWarnings(as.numeric(raw_pheno_df[, trait_]))))
if (length(idx_na_inf_char_raw) > 0) {
raw_pheno_df <- raw_pheno_df[-idx_na_inf_char_raw, ]
}
# remove rows with na, inf or char associated to trait for ls_mean_pheno_df
idx_na_inf_char_ls_means <- which(is.na(ls_mean_pheno_df[, trait_]) |
is.infinite(ls_mean_pheno_df[, trait_]) |
is.na(suppressWarnings(as.numeric(ls_mean_pheno_df[, trait_]))))
if (length(idx_na_inf_char_ls_means) > 0) {
ls_mean_pheno_df <- ls_mean_pheno_df[-idx_na_inf_char_ls_means, ]
}
# remove rows with na, inf or char associated to trait for blup_pheno_df
idx_na_inf_char_blups <- which(is.na(blup_pheno_df[, trait_]) |
is.infinite(blup_pheno_df[, trait_]) |
is.na(suppressWarnings(as.numeric(blup_pheno_df[, trait_]))))
if (length(idx_na_inf_char_blups) > 0) {
blup_pheno_df <- blup_pheno_df[-idx_na_inf_char_blups, ]
}
# remove monomorphic markers
omic_df <- remove_monomorphic_markers(omic_df)
monomorphic_markers_list_ <- omic_df$monomorphic_markers
omic_df <- omic_df$filtered_df
colnames(omic_df)[1] <- "Genotype"
# merge ls_mean_pheno_df and omic_df for integrity of analyses
merged_df <- merge(ls_mean_pheno_df, omic_df, by = "Genotype")
ls_mean_pheno_df <- merged_df[, c("Genotype", trait_)]
omic_df <- merged_df[, -match(c("Genotype", trait_), colnames(merged_df))]
rownames(omic_df) <- merged_df$Genotype
rm(merged_df)
# get fixed effect vars where rows and columns are fitted as quantitative
# variables for each environment (i.e. combination of site, year, management and block)
fixed_effect_vars_ <- grep("_row$|_column$", colnames(raw_pheno_df), value = TRUE)
fixed_effect_vars_
max(raw_pheno_df[,ncol(raw_pheno_df)])
max(raw_pheno_df[,ncol(raw_pheno_df)-1])
raw_pheno_df[,ncol(raw_pheno_df)-1]
raw_pheno_df[,ncol(raw_pheno_df)]
sum(raw_pheno_df[,ncol(raw_pheno_df)]==0)
sum(raw_pheno_df[,ncol(raw_pheno_df)]==0) == nrow(raw_pheno_df)
trait_
raw_pheno_df[,trait_]
is.numeric(raw_pheno_df[,trait_])
is.numeric(NA)
is.numeric(NULL)
is.numeric("")
raw_pheno_df[is.numeric(raw_pheno_df[,trait_]),]$Envir
length(raw_pheno_df[is.numeric(raw_pheno_df[,trait_]),]$Envir)
length(unique(raw_pheno_df[is.numeric(raw_pheno_df[,trait_]),]$Envir))
df_trait_ <-raw_pheno_df[is.numeric(raw_pheno_df[,trait_]),]
df_trait_[,fixed_effect_vars_]
View(df_trait_)
df_trait_[,fixed_effect_vars_[1]]
non_constant_columns <- colnames(df_trait_[, fixed_effect_vars_])[apply(df_trait_[, fixed_effect_vars_], 2, function(x) length(unique(x)) > 1)]
length(non_constant_columns)
length(raw_pheno_df[is.numeric(raw_pheno_df[,trait_]),]$Envir)
styler:::style_active_file()
length(unique(df_trait_$Envir))
length(unique(df_trait_$Envir))*2
length(unique(df_trait_$Envir))
length(unique(trait_fix_eff_vars_))
trait_ = "anthesis"
df_trait_ <- raw_pheno_df[is.numeric(raw_pheno_df[, trait_]), ]
trait_fix_eff_vars_ <- colnames(df_trait_[, fixed_effect_vars_])[
apply(df_trait_[, fixed_effect_vars_], 2, function(x) length(unique(x)) > 1)
]
length(unique(df_trait_$Envir))
length(unique(trait_fix_eff_vars_))
trait_ = "anthesis.silking.interval"
df_trait_ <- raw_pheno_df[is.numeric(raw_pheno_df[, trait_]), ]
trait_fix_eff_vars_ <- colnames(df_trait_[, fixed_effect_vars_])[
apply(df_trait_[, fixed_effect_vars_], 2, function(x) length(unique(x)) > 1)
]
length(unique(df_trait_$Envir))*2
length(unique(trait_fix_eff_vars_))
trait_ = "silking"
df_trait_ <- raw_pheno_df[is.numeric(raw_pheno_df[, trait_]), ]
trait_fix_eff_vars_ <- colnames(df_trait_[, fixed_effect_vars_])[
apply(df_trait_[, fixed_effect_vars_], 2, function(x) length(unique(x)) > 1)
]
length(unique(df_trait_$Envir))*2
length(unique(trait_fix_eff_vars_))
