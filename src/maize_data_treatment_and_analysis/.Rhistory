library(reticulate)
if ("pine_env" %in% conda_list()$name) {
print("using pine_env")
use_condaenv("pine_env")
}
# install other requirements from github if necessary
install_other_requirements <- F
if (install_other_requirements) {
# reticulate::install_miniconda()
conda_create("pine_env")
use_condaenv("pine_env")
library(devtools)
devtools::install_github("ljacquin/KRMM")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(envname = "pine_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
install.packages('mixOmics')
library(mixOmics)
# script meant to perform genomic prediction and analyses for pine
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
if ("pine_env" %in% conda_list()$name) {
print("using pine_env")
use_condaenv("pine_env")
}
# install other requirements from github if necessary
install_other_requirements <- F
if (install_other_requirements) {
# reticulate::install_miniconda()
conda_create("pine_env")
use_condaenv("pine_env")
library(devtools)
devtools::install_github("ljacquin/KRMM")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(envname = "pine_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
library(BiocManager)
library(BiocManager)
BiocManager::install("mixOmicsTeam/mixOmics")
BiocManager::install("mixOmicsTeam/mixOmics@development")
remotes::install_github('mixOmicsTeam/mixOmics')
library(BiocManager)
BiocManager::install(version = "3.19")
library(BiocManager)
BiocManager::install(version = "3.18")
library(BiocManager)
BiocManager::install("mixOmicsTeam/mixOmics")
packageVersion(BiocManager)
packageVersion('BiocManager')
BiocManager::install(version = "3.18")
install.packages("BiocManager")
library(BiocManager)
BiocManager::install(version = "3.18")
# script meant to perform genomic prediction and analyses for pine
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
if ("pine_env" %in% conda_list()$name) {
print("using pine_env")
use_condaenv("pine_env")
}
# install other requirements from github if necessary
install_other_requirements <- F
if (install_other_requirements) {
# reticulate::install_miniconda()
conda_create("pine_env")
use_condaenv("pine_env")
library(devtools)
devtools::install_github("ljacquin/KRMM")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(envname = "pine_env")
py_install("umap-learn", pip = T, pip_ignore_installed = T)
install.packages("umap")
}
use_tensorflow_or_umap <- F
if (use_tensorflow_or_umap) {
# leave tensorflow and keras for later use
library(tensorflow)
library(keras3)
library(umap)
tensorflow::tf$random$set_seed(0)
py_module_available("keras") # must return TRUE
py_module_available("tensorflow") # must return TRUE
py_discover_config("keras") # more info on the python env, tf and keras
}
library(MASS)
library(data.table)
library(stringr)
library(lme4)
library(tidyr)
library(FactoMineR)
library(doParallel)
library(doRNG)
library(robustbase)
library(foreach)
library(parallel)
library(missForest)
library(Matrix)
library(matrixcalc)
library(rgl)
library(Rfast)
library(cvTools)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(dplyr)
library(KRMM)
library(kernlab)
library(whitening)
library(glmnet)
library(ranger)
library(mixOmics)
traits_ = "H"
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
green_gradient <- c("#A3E4A7", "#66C266", "#2E8B57", "#006400", "#003200")
pa_colors_ <- c(blue_gradient, yellow_orange_gradient, green_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(
blue_gradient[3],
yellow_orange_gradient[3],
green_gradient[3]
)
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c("H", "I", "D", "T4", "T5", "T6")
traits_ = "H"
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
trait_ = "H"
# define shift seed value by
mult_seed_by_ <- 100
# set k for K-folds cv
k_folds_ <- 5
# define number of shuffles
n_shuff_ <- 20
# get raw, ls-means and blup phenotype data
raw_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path, "phenotype_data.csv"
)))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))[, c("Genotype", trait_)]
blup_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"blup_phenotypes.csv"
)))[, c("Genotype", trait_)]
# get genotype data
omic_df <- as.data.frame(fread(paste0(
geno_dir_path,
"genomic_data.csv"
)))
dim(raw_pheno_df)
length(unique(raw_pheno_df$Genotype))
dim(omic_df)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# source functions
source("../functions.R")
# set options
options(future.globals.maxSize = 60 * 1024^3)
options(expressions = 5e5)
options(warn = -1)
# set color gradients and color vector for predictive abilities (pa)
blue_gradient <- c("#90B3E0", "#3D9BC5", "#005AB5", "#00407A", "#002A66")
yellow_orange_gradient <- colorRampPalette(c("#FFEA00", "#FF7A00"))(5)
green_gradient <- c("#A3E4A7", "#66C266", "#2E8B57", "#006400", "#003200")
pa_colors_ <- c(blue_gradient, yellow_orange_gradient, green_gradient)
# set color vector for computed genomic heritabilities (h2)
h2_colors_ <- c(
blue_gradient[3],
yellow_orange_gradient[3],
green_gradient[3]
)
# define number of cores
nb_cores_ <- 12
# define function(s) and package(s) to export for parallelization
pkgs_to_export_ <- c(
"ranger",
"kernlab",
"KRMM",
"glmnet",
"foreach",
"cvTools"
)
# set input paths
geno_dir_path <- "../../data/genomic_data/"
pheno_dir_path <- "../../data/phenotype_data/"
# set path for wiser phenotypes estimated using whitening
wiser_pheno_dir_path <- "../../data/phenotype_data/wiser_phenotype_estimates/"
# output result path for genotype graphics
output_pred_results_path <- "../../results/genomic_prediction/"
output_pred_graphics_path <- "../../results/genomic_prediction_graphics/"
# define kernels for wiser
kernels_ <- c("linear", "identity")
# define traits for genomic prediction and analyses
traits_ <- c(
"anthesis.silking.interval", "anthesis", "ear.height",
"grain.number", "grain.weight", "grain.yield",
"plant.height", "silking", "tassel.height"
)
# traits_ <- c(
#   "grain.weight", "grain.yield"
# )
# get kernel and trait arguments
args <- commandArgs(trailingOnly = TRUE)
kernel_num <- as.integer(args[1])
trait_num <- as.integer(args[2])
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))
colnames(ls_mean_pheno_df)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
ls_mean_pheno_df <- as.data.frame(fread(paste0(
pheno_dir_path,
"adjusted_ls_mean_phenotypes.csv"
)))
colnames(ls_mean_pheno_df)
# script meant to correct for spatial heterogenity for all traits
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
library(devtools)
if ("pine_env" %in% conda_list()$name) {
use_condaenv("pine_env")
}
library(tidyverse)
library(tidyr)
library(data.table)
library(lubridate)
library(plotly)
library(htmlwidgets)
library(emmeans)
library(SpATS)
library(stringr)
library(lme4)
library(anytime)
library(foreach)
library(parallel)
library(doParallel)
# define computation mode, i.e. "local" or "cluster"
computation_mode <- "cluster"
# if comutations are local in rstudio, detect and set script path
# automatically using rstudioapi
if (identical(computation_mode, "local")) {
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
}
# source functions
source("../functions.R")
# set options to increase memory and suppress warnings
options(expressions = 5e5)
options(warn = -1)
# set paths
# input and output data paths
pheno_dir_path_ <- "../../data/phenotype_data/"
pheno_file_path_ <- paste0(
pheno_dir_path_,
"phenotype_data.csv"
)
output_spats_file_path <- paste0(
pheno_dir_path_,
"spats_per_env_adjusted_phenotypes/"
)
# define function(s) and package(s) to export for parallelization
func_to_export_ <- c("fread")
pkgs_to_export_ <- c(
"data.table", "stringr", "SpATS", "lme4",
"lubridate", "emmeans", "plotly", "tidyr", "htmlwidgets"
)
# define selected_traits_ and vars_to_keep_ for output
selected_traits_ <- c("H", "I", "D", "T4", "T5", "T6")
vars_to_keep_ <- c(
"Envir", "Latitude", "Longitude", "Genotype"
)
# colors for boxplots
blue_gradient <- c("#3D9BC5", "#005AB5", "#00407A")
yellow_orange_gradient <- colorRampPalette(c("#149414", "#3b5534"))(3)
bp_colors_ <- c(blue_gradient, yellow_orange_gradient)
# define parameters for computations
min_obs_lmer_ <- 5 # cannot fit lmer if less than that.. Note  5 is pretty small
# and doesn't necessarily make sense either, its somewhat arbitrary
# get pheno_df and detect attributes, e.g. number of modalities or levels for specific variables
pheno_df_ <- as.data.frame(fread(pheno_file_path_))
management_types <- unique(pheno_df_$Management)
n_management <- length(management_types)
# define a list for singular models associated to SpATS
singular_model_list_ <<- vector("list", length(selected_traits_))
names(singular_model_list_) <- selected_traits_
View(pheno_df_)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# script meant to correct for spatial heterogenity for all traits
# note: text is formatted from Addins using Style active file from styler package
# clear memory and source libraries
rm(list = ls())
library(reticulate)
library(devtools)
if ("pine_env" %in% conda_list()$name) {
use_condaenv("pine_env")
}
library(tidyverse)
library(tidyr)
library(data.table)
library(lubridate)
library(plotly)
library(htmlwidgets)
library(emmeans)
library(SpATS)
library(stringr)
library(lme4)
library(anytime)
library(foreach)
library(parallel)
library(doParallel)
# define computation mode, i.e. "local" or "cluster"
computation_mode <- "cluster"
# if comutations are local in rstudio, detect and set script path
# automatically using rstudioapi
if (identical(computation_mode, "local")) {
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
}
# source functions
source("../functions.R")
# set options to increase memory and suppress warnings
options(expressions = 5e5)
options(warn = -1)
# set paths
# input and output data paths
pheno_dir_path_ <- "../../data/phenotype_data/"
pheno_file_path_ <- paste0(
pheno_dir_path_,
"phenotype_data.csv"
)
output_spats_file_path <- paste0(
pheno_dir_path_,
"spats_per_env_adjusted_phenotypes/"
)
# define function(s) and package(s) to export for parallelization
func_to_export_ <- c("fread")
pkgs_to_export_ <- c(
"data.table", "stringr", "SpATS", "lme4",
"lubridate", "emmeans", "plotly", "tidyr", "htmlwidgets"
)
# define selected_traits_ and vars_to_keep_ for output
selected_traits_ <- c("H", "I", "D", "T4", "T5", "T6")
vars_to_keep_ <- c(
"Envir", "Latitude", "Longitude", "Genotype"
)
# colors for boxplots
blue_gradient <- c("#3D9BC5", "#005AB5", "#00407A")
yellow_orange_gradient <- colorRampPalette(c("#149414", "#3b5534"))(3)
bp_colors_ <- c(blue_gradient, yellow_orange_gradient)
# define parameters for computations
min_obs_lmer_ <- 5 # cannot fit lmer if less than that.. Note  5 is pretty small
# and doesn't necessarily make sense either, its somewhat arbitrary
# get pheno_df and detect attributes, e.g. number of modalities or levels for specific variables
pheno_df_ <- as.data.frame(fread(pheno_file_path_))
management_types <- unique(pheno_df_$Management)
n_management <- length(management_types)
View(pheno_df_)
n_management
management_types
setwd(dirname(getActiveDocumentContext()$path))
source("../functions.R")
library(lsmeans)
3000/500
citation("mixOmics")
